# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2

references:
  app_containers: &app_containers
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
          RAILS_ENV: test
          RACK_ENV: test
          DATABASE_URL: "postgres://postgres@localhost/disclosure-checker-test"
          SECRET_KEY_BASE: needed_for_assets_precompile
          EXTERNAL_URL: mocked_in_tests
          DEV_TOOLS_ENABLED: "1"
      - image: circleci/postgres:10.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: disclosure-checker-test
  cloud_container: &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: family-justice

jobs:
  dependencies:
    <<: *app_containers
    steps:
      - checkout

      - run:
          name: bundle install
          command: bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: yarn install
          command: yarn install --frozen-lockfile
      - save_cache:
          key: v1-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: precompile assets
          command: bundle exec rake assets:precompile
      - save_cache:
          key: v1-assets-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - public/assets

  run_linters:
    <<: *app_containers
    steps:
      - restore_cache:
          keys:
            - v1-bundle-{{ checksum "Gemfile.lock" }}
      - run: bundle --path vendor/bundle
      - run: bundle exec rake db:create db:schema:load
      - run:
          name: run linters
          command: |
            bundle exec rake rubocop
            bundle exec rake brakeman

  run_specs:
    <<: *app_containers
    steps:
      - restore_cache:
          keys:
            - v1-bundle-{{ checksum "Gemfile.lock" }}
      - run: bundle --path vendor/bundle
      - run: bundle exec rake db:create db:schema:load
      - run:
          name: run specs
          command: bundle exec rake spec

  run_features1:
    <<: *app_containers
    steps:
      - restore_cache:
          keys:
            - v1-bundle-{{ checksum "Gemfile.lock" }}
      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-assets-{{ .Environment.CIRCLE_SHA1 }}
      - run: bundle --path vendor/bundle
      - run: bundle exec rake db:create db:schema:load
      - run:
          name: run youth features
          command: bundle exec cucumber features/youth

  run_features2:
    <<: *app_containers
    steps:
      - restore_cache:
          keys:
            - v1-bundle-{{ checksum "Gemfile.lock" }}
      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-assets-{{ .Environment.CIRCLE_SHA1 }}
      - run: bundle --path vendor/bundle
      - run: bundle exec rake db:create db:schema:load
      - run:
          name: run adult features
          command: bundle exec cucumber features/adults

  build_staging:
    <<: *cloud_container
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: build docker images
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push docker images
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:staging.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:staging.latest"

  deploy_staging:
    <<: *cloud_container
    steps:
      - checkout

      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context staging

      - deploy:
          name: rolling update image to staging
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n disclosure-checker-staging \
                    deployment/disclosure-checker-deployment-staging \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n disclosure-checker-staging \
                    deployment/disclosure-checker-deployment-staging \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

  tag_production:
    <<: *cloud_container
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: promote staging image to production
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker pull "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" \
                       "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

  deploy_production:
    <<: *cloud_container
    steps:
      - checkout

      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context production

      - deploy:
          name: rolling update image to production
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n disclosure-checker-production \
                    deployment/disclosure-checker-deployment-production \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n disclosure-checker-production \
                    deployment/disclosure-checker-deployment-production \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"


workflows:
  version: 2

  test-build-deploy:
    jobs:
      - dependencies

      - run_linters:
          requires:
            - dependencies
      - run_specs:
          requires:
            - dependencies
      - run_features1:
          requires:
            - dependencies
      - run_features2:
          requires:
            - dependencies

      - build_staging:
          requires:
            - run_linters
            - run_specs
            - run_features1
            - run_features2
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - build_staging
      - approve_production:
          type: approval
          requires:
            - deploy_staging
      - tag_production:
          requires:
            - approve_production
      - deploy_production:
          requires:
            - tag_production
